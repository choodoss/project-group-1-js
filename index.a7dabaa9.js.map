{"mappings":"oeAAAA,EAAA,S","sources":["src/js/Firebase-storage.js"],"sourcesContent":["import { collection, addDoc } from \"firebase/firestore\";\nimport {FirebaseApp} from \"./Firebase-init\";\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport {\n  getDatabase,\n  ref,\n  set,\n  onValue,\n  update,\n  push,\n  remove,\n  get,\n} from 'firebase/database';\n  \n  export class DatabaseAPI {\n    #AUTH = getAuth(FirebaseApp);\n    #DATABASE = getDatabase(FirebaseApp); \n\n    addToWatched(movieID) {\n      onAuthStateChanged(this.#AUTH, user => {\n        if (user) {\n          let userId = user.uid;\n          const reference = ref(\n            this.#DATABASE,\n            `users_library/${userId}/watched/${movieID}`\n          );\n          get(reference).then(snapshot => {\n            if (snapshot.exists()) {\n              console.log(`'${movieID}' is already in the Watched List`);\n              return;\n            } else {\n              set(reference, movieID);\n              console.log(`'${movieID.title}' added to Watched List`);\n            }\n          })\n           .catch((error) => {\n              console.error(error);\n            })\n        }\n      });\n    }\n  \n    addToQueue(movieID) {\n      onAuthStateChanged(this.#AUTH, user => {\n        if (user) {\n          let userId = user.uid;\n          const reference = ref(\n            this.#DATABASE,\n            `users_library/${userId}/queue/${movieID}`\n          );\n  \n          get(reference).then(snapshot => {\n            if (snapshot.exists()) {\n              console.log(`'${movieID.title}' is already in the Queue List`);\n              return;\n            } else {\n              set(reference, movieID);\n              console.log(`'${movieID.title}' added to Queue List`);\n            }\n          });\n        }\n      });\n    }\n  \n    async getWatchedList() {\n      const user = await new Promise(resolve =>\n        onAuthStateChanged(this.#AUTH, resolve)\n      );\n      if (!user) return;\n  \n      const userId = user.uid;\n      const reference = ref(this.#DATABASE, `users_library/${userId}/watched/`);\n  \n      const snapshot = await get(reference);\n      if (snapshot.exists) {\n        const moviesObject = snapshot.val();\n        const moviesArray = Object.keys(moviesObject).map(key => {\n          return moviesObject[key];\n        });\n        console.log(moviesArray);\n        return moviesArray;\n      }\n    }\n  \n    async getQueueList() {\n      const user = await new Promise(resolve =>\n        onAuthStateChanged(this.#AUTH, resolve)\n      );\n      if (!user) return;\n  \n      const userId = user.uid;\n      const reference = ref(this.#DATABASE, `users_library/${userId}/queue/`);\n  \n      const snapshot = await get(reference);\n      if (snapshot.exists) {\n        const moviesObject = snapshot.val();\n        const moviesArray = Object.keys(moviesObject).map(key => {\n          return moviesObject[key];\n        });\n        console.log(moviesArray);\n        return moviesArray;\n      }\n    }\n  \n    removeMovieFromWatched(movieID) {\n      onAuthStateChanged(this.#AUTH, user => {\n        let userId = user.uid;\n  \n        const reference = ref(this.#DATABASE, `users_library/${userId}/watched/`);\n  \n        onValue(reference, snapshot => {\n          if (snapshot.val() === undefined || snapshot.val() === null) {\n            return;\n          }\n  \n          const refToRemove = ref(\n            this.#DATABASE,\n            `users_library/${userId}/watched/${movieID}`\n          );\n  \n          remove(refToRemove);\n          console.log('Movie removed from watched');\n        });\n      });\n    }\n  \n    removeMovieFromQueue(movieID) {\n      onAuthStateChanged(this.#AUTH, user => {\n        let userId = user.uid;\n  \n        const reference = ref(this.#DATABASE, `users_library/${userId}/queue/`);\n  \n        onValue(reference, snapshot => {\n          if (snapshot.val() === undefined || snapshot.val() === null) {\n            return;\n          }\n  \n          const refToRemove = ref(\n            this.#DATABASE,\n            `users_library/${userId}/queue/${movieID}`\n          );\n  \n          remove(refToRemove);\n          console.log('Movie removed from queue');\n        });\n      });\n    }\n  }"],"names":["parcelRequire"],"version":3,"file":"index.a7dabaa9.js.map"}